#!/bin/bash
# Pre-push hook for Mauscribe
# Runs before git push to perform tests and start pipeline monitoring

echo "🔍 Pre-push hook triggered - Running tests and starting pipeline monitoring..."

# Get the current directory (repository root)
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

# Check if we're on a protected branch
CURRENT_BRANCH=$(git branch --show-current)
PROTECTED_BRANCHES=("main" "master" "develop")

for branch in "${PROTECTED_BRANCHES[@]}"; do
    if [[ "$CURRENT_BRANCH" == "$branch" ]]; then
        echo "⚠️  Warning: Pushing to protected branch '$CURRENT_BRANCH'"
        echo "💡 Make sure your changes are reviewed and tested"
        echo ""
    fi
done

# Check if there are uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo "⚠️  Warning: You have uncommitted changes"
    echo "💡 Consider committing or stashing them before pushing"
    echo ""
fi

# Run tests before push
if [ -f "run_tests.py" ]; then
    echo "🧪 Running tests before push..."
    echo "=================================================="

    python run_tests.py
    TEST_EXIT_CODE=$?

    if [ $TEST_EXIT_CODE -ne 0 ]; then
        echo ""
        echo "❌ Tests failed! Push aborted."
        echo "💡 Fix the failing tests before pushing"
        exit 1
    else
        echo ""
        echo "✅ All tests passed!"
        echo "=================================================="
    fi
else
    echo "⚠️  Test runner not found: run_tests.py"
    echo "💡 No tests will be run before push"
    echo ""
fi

# Start pipeline monitoring before push
echo "🔍 Starting pipeline monitoring..."
echo "=================================================="

# Get current branch and remote info
REMOTE_URL=$(git config --get remote.origin.url)

echo "📤 Branch: $CURRENT_BRANCH"
echo "🌐 Remote: $REMOTE_URL"
echo ""

# Check if pipeline monitor exists
if [ -f "pipeline_monitor.py" ]; then
    # Use the correct Python command for the platform
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
    elif command -v python &> /dev/null; then
        PYTHON_CMD="python"
    else
        echo "❌ Python not found in PATH"
        echo "💡 Pipeline monitoring will be handled by your CI/CD platform"
        PYTHON_CMD=""
    fi

    if [ -n "$PYTHON_CMD" ]; then
        # Run the pipeline monitor and capture output
        PIPELINE_OUTPUT=$($PYTHON_CMD pipeline_monitor.py 2>&1)
        PIPELINE_EXIT_CODE=$?

        # Display the pipeline output
        echo "$PIPELINE_OUTPUT"

        # Add summary
        echo ""
        echo "=================================================="
        echo "📊 PIPELINE MONITORING SUMMARY"
        echo "=================================================="

        if [ $PIPELINE_EXIT_CODE -eq 0 ]; then
            echo "✅ Pipeline monitoring completed successfully"
            echo "💡 Your CI/CD pipelines are being monitored"

            # Check if pipeline succeeded or failed from output
            if echo "$PIPELINE_OUTPUT" | grep -q "❌ Pipeline failed"; then
                echo "⚠️  Note: Pipeline failed but monitoring worked"
                echo "🔗 Check the details above for failure reasons"
            elif echo "$PIPELINE_OUTPUT" | grep -q "✅ Pipeline succeeded"; then
                echo "🎉 Pipeline succeeded! All checks passed."
            else
                echo "ℹ️  Pipeline status: Check the output above"
            fi
        else
            echo "❌ Pipeline monitoring failed"
            echo "💡 Check the output above for details"
            echo "🔗 Check your CI/CD platform for pipeline status"
        fi

        # Extract key information for summary
        if echo "$PIPELINE_OUTPUT" | grep -q "🔗 URL:"; then
            echo ""
            echo "🔗 Pipeline Details:"
            echo "$(echo "$PIPELINE_OUTPUT" | grep "🔗 URL:" | head -1)"
            echo "$(echo "$PIPELINE_OUTPUT" | grep "⏱️  Duration:" | head -1)"
        fi

        # Show GitHub Actions link
        if [[ "$REMOTE_URL" == *"github.com"* ]]; then
            GITHUB_ACTIONS_URL="https://github.com/$(echo $REMOTE_URL | sed 's/.*github.com[:/]\([^/]*\)\/\([^/]*\)\.git.*/\1\/\2/')/actions"
            echo ""
            echo "🔗 GitHub Actions: $GITHUB_ACTIONS_URL"
        fi
    fi
else
    echo "⚠️  Pipeline monitor not found"
    echo "💡 Pipeline monitoring will be handled by your CI/CD platform"

    # Try to detect CI/CD platform and provide helpful info
    if [[ "$REMOTE_URL" == *"github.com"* ]]; then
        echo "🔗 Check GitHub Actions: https://github.com/$(echo $REMOTE_URL | sed 's/.*github.com[:/]\([^/]*\)\/\([^/]*\)\.git.*/\1\/\2/')/actions"
    elif [[ "$REMOTE_URL" == *"gitlab.com"* ]]; then
        echo "🔗 Check GitLab CI: $(echo $REMOTE_URL | sed 's/\.git$//')/-/pipelines"
    elif [[ "$REMOTE_URL" == *"bitbucket.org"* ]]; then
        echo "🔗 Check Bitbucket Pipelines: $(echo $REMOTE_URL | sed 's/\.git$//')/pipelines"
    fi
fi

echo ""
echo "✅ Pre-push checks completed successfully"
echo "🚀 Ready to push!"
echo ""
echo "💡 Pipeline monitoring is already running"
echo "   - Check the output above for current status"
echo "   - Or check GitHub Actions directly"
