#!/bin/bash
# Pre-commit hook for Mauscribe
# Runs before git commit to perform linting and code quality checks

echo "üîç Pre-commit hook triggered - Running code quality checks..."

# Get the current directory (repository root)
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

# Check if there are staged changes
if git diff --cached --quiet; then
    echo "‚ö†Ô∏è  No staged changes to commit"
    echo "üí° Use 'git add' to stage files before committing"
    exit 1
fi

# Check if .venv exists and activate it
if [ -d ".venv" ]; then
    echo "üêç Activating virtual environment (.venv)..."

    # Activate virtual environment
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
        # Windows
        source .venv/Scripts/activate
    else
        # Unix/Linux
        source .venv/bin/activate
    fi

    echo "‚úÖ Virtual environment activated"
    echo ""
else
    echo "‚ö†Ô∏è  Virtual environment (.venv) not found"
    echo "üí° Create virtual environment first: python -m venv .venv"
    echo ""
fi

# Run pre-commit checks if available
if [ -f ".pre-commit-config.yaml" ]; then
    echo "üîç Running pre-commit checks..."
    echo "=================================================="

    # Check if pre-commit is installed, install if not
    if ! command -v pre-commit &> /dev/null; then
        echo "üì¶ Pre-commit not installed, installing now..."

        # Try to install pre-commit
        if [ -d ".venv" ]; then
            # Use pip from virtual environment
            if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
                # Windows
                .venv/Scripts/pip install pre-commit
            else
                # Unix/Linux
                .venv/bin/pip install pre-commit
            fi
        else
            # Fallback to system pip
            python -m pip install pre-commit
        fi

        if [ $? -eq 0 ]; then
            echo "‚úÖ Pre-commit installed successfully"

            # Install pre-commit hooks
            echo "üîß Installing pre-commit hooks..."
            if [ -d ".venv" ]; then
                if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
                    .venv/Scripts/pre-commit install
                else
                    .venv/bin/pre-commit install
                fi
            else
                pre-commit install
            fi
            echo "‚úÖ Pre-commit hooks installed"
        else
            echo "‚ùå Failed to install pre-commit"
            echo "üí° Will run basic checks instead"
        fi
    fi

    # Now try to run pre-commit
    if command -v pre-commit &> /dev/null; then
        # Run pre-commit on staged files
        echo "üöÄ Running pre-commit checks..."
        pre-commit run

        if [ $? -ne 0 ]; then
            echo ""
            echo "‚ùå Pre-commit checks failed! Commit aborted."
            echo "üí° Fix the linting issues before committing"
            echo "üí° Run 'pre-commit run --all-files' to check all files"
            exit 1
        else
            echo ""
            echo "‚úÖ All pre-commit checks passed!"
            echo "=================================================="
        fi
    else
        echo "‚ö†Ô∏è  Pre-commit still not available, running basic checks instead..."
        echo ""

        # Run basic checks manually
        echo "üîç Running basic code quality checks..."

        # Check Python files with basic syntax check
        PYTHON_FILES=$(git diff --cached --name-only | grep '\.py$')
        if [ -n "$PYTHON_FILES" ]; then
            echo "üêç Checking Python files for syntax errors..."
            for file in $PYTHON_FILES; do
                if [ -f "$file" ]; then
                    python -m py_compile "$file"
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ $file - Syntax OK"
                    else
                        echo "‚ùå $file - Syntax error!"
                        echo "üí° Fix syntax errors before committing"
                        exit 1
                    fi
                fi
            done
        fi

        # Check for trailing whitespace
        TRAILING_WHITESPACE=$(git diff --cached | grep -E "^\+.*[[:space:]]+$" | wc -l)
        if [ $TRAILING_WHITESPACE -gt 0 ]; then
            echo "‚ö†Ô∏è  Warning: Found $TRAILING_WHITESPACE lines with trailing whitespace"
            echo "üí° Consider removing trailing whitespace"
        fi

        echo "‚úÖ Basic checks completed"
        echo "=================================================="
    fi
else
    echo "‚ö†Ô∏è  Pre-commit config not found: .pre-commit-config.yaml"
    echo "üí° No linting checks will be performed"
    echo ""
fi

# Check for common issues in staged files
echo "üîç Checking staged files for common issues..."

# Check for large files
LARGE_FILES=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9}' | head -5)
if [ -n "$LARGE_FILES" ]; then
    echo "‚ö†Ô∏è  Warning: Large files detected (>1MB):"
    echo "$LARGE_FILES"
    echo "üí° Consider if these files should be committed"
    echo ""
fi

# Check for merge conflict markers
CONFLICT_MARKERS=$(git diff --cached | grep -E "^[+-]<<<<<<<|^[+-]=======|^[+-]>>>>>>>" | wc -l)
if [ $CONFLICT_MARKERS -gt 0 ]; then
    echo "‚ùå Merge conflict markers detected! Commit aborted."
    echo "üí° Resolve merge conflicts before committing"
    exit 1
fi

# Check for TODO/FIXME comments in staged files
TODO_COMMENTS=$(git diff --cached | grep -i "TODO\|FIXME\|HACK\|XXX" | wc -l)
if [ $TODO_COMMENTS -gt 0 ]; then
    echo "‚ö†Ô∏è  Warning: Found $TODO_COMMENTS TODO/FIXME comments in staged files"
    echo "üí° Consider addressing these before committing"
    echo ""
fi

echo "‚úÖ Pre-commit checks completed successfully"
echo "ÔøΩÔøΩ Ready to commit!"
